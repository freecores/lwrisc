// megafunction wizard: %RAM: 2-PORT%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: altsyncram

// ============================================================
// File Name: alt_ram.v
// Megafunction Name(s):
// 			altsyncram
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 4.2 Build 157 12/07/2004 SJ Full Version
// ************************************************************


//Copyright (C) 1991-2004 Altera Corporation
//Any  megafunction  design,  and related netlist (encrypted  or  decrypted),
//support information,  device programming or simulation file,  and any other
//associated  documentation or information  provided by  Altera  or a partner
//under  Altera's   Megafunction   Partnership   Program  may  be  used  only
//to program  PLD  devices (but not masked  PLD  devices) from  Altera.   Any
//other  use  of such  megafunction  design,  netlist,  support  information,
//device programming or simulation file,  or any other  related documentation
//or information  is prohibited  for  any  other purpose,  including, but not
//limited to  modification,  reverse engineering,  de-compiling, or use  with
//any other  silicon devices,  unless such use is  explicitly  licensed under
//a separate agreement with  Altera  or a megafunction partner.  Title to the
//intellectual property,  including patents,  copyrights,  trademarks,  trade
//secrets,  or maskworks,  embodied in any such megafunction design, netlist,
//support  information,  device programming or simulation file,  or any other
//related documentation or information provided by  Altera  or a megafunction
//partner, remains with Altera, the megafunction partner, or their respective
//licensors. No other licenses, including any licenses needed under any third
//party's intellectual property, are provided herein.


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module alt_ram (
        data,
        wren,
        wraddress,
        rdaddress,
        clock,
        q);

    input	[11:0]  data;
    input	  wren;
    input	[10:0]  wraddress;
    input	[10:0]  rdaddress;
    input	  clock;
    output	[11:0]  q;

    wire [11:0] sub_wire0;
    wire [11:0] q = sub_wire0[11:0];

    altsyncram	altsyncram_component (
                   .wren_a (wren),
                   .clock0 (clock),
                   .address_a (wraddress),
                   .address_b (rdaddress),
                   .data_a (data),
                   .q_b (sub_wire0)
                   // synopsys translate_off
                   ,
                   .aclr0 (),
                   .aclr1 (),
                   .addressstall_a (),
                   .addressstall_b (),
                   .byteena_a (),
                   .byteena_b (),
                   .clock1 (),
                   .clocken0 (),
                   .clocken1 (),
                   .data_b (),
                   .q_a (),
                   .rden_b (),
                   .wren_b ()
                   // synopsys translate_on
               );
    defparam
        altsyncram_component.intended_device_family = "Cyclone",
        altsyncram_component.operation_mode = "DUAL_PORT",
        altsyncram_component.width_a = 12,
        altsyncram_component.widthad_a = 11,
        altsyncram_component.numwords_a = 2048,
        altsyncram_component.width_b = 12,
        altsyncram_component.widthad_b = 11,
        altsyncram_component.numwords_b = 2048,
        altsyncram_component.lpm_type = "altsyncram",
        altsyncram_component.width_byteena_a = 1,
        altsyncram_component.outdata_reg_b = "UNREGISTERED",
        altsyncram_component.indata_aclr_a = "NONE",
        altsyncram_component.wrcontrol_aclr_a = "NONE",
        altsyncram_component.address_aclr_a = "NONE",
        altsyncram_component.address_reg_b = "CLOCK0",
        altsyncram_component.address_aclr_b = "NONE",
        altsyncram_component.outdata_aclr_b = "NONE",
        altsyncram_component.read_during_write_mode_mixed_ports = "DONT_CARE",
        altsyncram_component.init_file = "init_rom.mif",
        altsyncram_component.init_file_layout = "PORT_B";


endmodule